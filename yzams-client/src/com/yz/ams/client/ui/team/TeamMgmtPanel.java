/*
 * TeamMgmtPanel.java
 * 
 * Copyright(c) 2007-2016 by Yingzhi Tech
 * All Rights Reserved
 * 
 * Created at 2016-06-01 15:12:48
 */
package com.yz.ams.client.ui.team;

import com.nazca.ui.NWaitingPanel;
import com.nazca.ui.laf.border.IconLabelBorder;
import com.nazca.ui.model.SimpleObjectListModel;
import com.nazca.ui.util.CardLayoutWrapper;
import com.yz.ams.client.DeleteOperationPanel;
import com.yz.ams.client.agent.AgentListener;
import com.yz.ams.client.agent.QueryAllTeamsAgent;
import com.yz.ams.client.agent.DeleteTeamAgent;
import com.yz.ams.client.agent.DeleteTeamMemberAgent;
import com.yz.ams.client.agent.QueryTeamMembersAgent;
import com.yz.ams.client.model.MemberTableModel;
import com.yz.ams.client.renderer.MemberTableRenderer;
import com.yz.ams.client.util.ClientUtils;
import com.yz.ams.model.Team;
import com.yz.ams.model.TeamMember;
import com.yz.ams.model.wrap.mgmt.TeamMemberWrap;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Qiu Dongyue <qdy@yzhtech.com>
 */
public class TeamMgmtPanel extends javax.swing.JPanel {
    private CardLayoutWrapper card1 = null;
    private CardLayoutWrapper card2 = null;
    //border
    private IconLabelBorder leftBorder = null;
    private IconLabelBorder rightBorder = null;
    //model
    private SimpleObjectListModel<Team> teamListModel = new SimpleObjectListModel<>();
    private MemberTableModel memberTableModel = new MemberTableModel();
    
    //agent
    private QueryAllTeamsAgent queryAllTeamsAgent = null;
    private DeleteTeamAgent deleteTeamAgent = null;
    private QueryTeamMembersAgent queryTeamMembersAgent = null;
    private DeleteTeamMemberAgent deleteTeamMemberAgent = null;
    private Team curTeam = null;
    private TeamMemberWrap curMemberWrap = null;
    private long timeSeq = 0;
    private long timeSeq_queryMember = 0;
    private List<TeamMember> memberLis = null;
    
    /**
     * Creates new form TeamMgmtPanel
     */
    public TeamMgmtPanel() {
        initComponents();
        initUI();
        initModel();
        initAgent();
        init();
        memberTableComp.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    selectingTeamMember();
                }
            }
        });
    }
    
    private void initUI() {
        leftBorder = new IconLabelBorder(getClass().getResource(
                "/com/yz/ams/client/res/list_team.png"), "团队列表");
        rightBorder = new IconLabelBorder(getClass().getResource(
                "/com/yz/ams/client/res/list_member.png"), "成员列表");
        leftPane.setBorder(leftBorder);
        rightPane.setBorder(rightBorder);
        card1 = new CardLayoutWrapper(jPanel3);
        card2 = new CardLayoutWrapper(jPanel4);
    }

    private void initModel() {
        teamListComp.setModel(teamListModel);
        memberTableComp.setModel(memberTableModel);
         
        memberTableComp.setDefaultRenderer(Object.class, new MemberTableRenderer());//renderer
    }

    private void initAgent() {
        queryAllTeamsAgent = new QueryAllTeamsAgent();
        queryAllTeamsAgent.addListener(queryAllTeamsAgentLis);
        deleteTeamAgent = new DeleteTeamAgent();
        deleteTeamAgent.addListener(null);
        queryTeamMembersAgent = new QueryTeamMembersAgent();
        queryTeamMembersAgent.addListener(querTeamMembersAgentLis);
        deleteTeamMemberAgent = new DeleteTeamMemberAgent();
        deleteTeamMemberAgent.addListener(null);
    }
    
    private void setBtnEnabled(boolean enabled) {
        refreshTeamBtn.setEnabled(enabled);
        addTeamBtn.setEnabled(enabled);
        deleteTeamBtn.setEnabled(enabled);
        updateTeamBtn.setEnabled(enabled);
        memberRefreshBtn.setEnabled(enabled);
        memberAddBtn.setEnabled(enabled);
        memberDelBtn.setEnabled(enabled);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        leftPane = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        refreshTeamBtn = new javax.swing.JButton();
        addTeamBtn = new javax.swing.JButton();
        updateTeamBtn = new javax.swing.JButton();
        deleteTeamBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        teamListComp = new javax.swing.JList<>();
        waitPane1 = new com.nazca.ui.NWaitingPanel();
        failPanel1 = new com.nazca.ui.FailedInfoPanel();
        rightPane = new javax.swing.JPanel();
        teamMemberBar = new javax.swing.JToolBar();
        memberRefreshBtn = new javax.swing.JButton();
        memberAddBtn = new javax.swing.JButton();
        memberDelBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        memberTableComp = new javax.swing.JTable();
        waitPane2 = new com.nazca.ui.NWaitingPanel();
        failPanel2 = new com.nazca.ui.FailedInfoPanel();
        generalMessagePanel1 = new com.yz.ams.client.ui.GeneralMessagePanel();

        setLayout(new java.awt.BorderLayout());

        leftPane.setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        refreshTeamBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/refresh_16.png"))); // NOI18N
        refreshTeamBtn.setText("刷新");
        refreshTeamBtn.setFocusable(false);
        refreshTeamBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        refreshTeamBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTeamBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshTeamBtn);

        addTeamBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/add_16.png"))); // NOI18N
        addTeamBtn.setText("添加");
        addTeamBtn.setFocusable(false);
        addTeamBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        addTeamBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTeamBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(addTeamBtn);

        updateTeamBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/update-16.png"))); // NOI18N
        updateTeamBtn.setText("修改");
        updateTeamBtn.setFocusable(false);
        updateTeamBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        updateTeamBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTeamBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(updateTeamBtn);

        deleteTeamBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/delete_16.png"))); // NOI18N
        deleteTeamBtn.setText("删除");
        deleteTeamBtn.setFocusable(false);
        deleteTeamBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        deleteTeamBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTeamBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(deleteTeamBtn);

        leftPane.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.CardLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        teamListComp.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        teamListComp.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                teamListCompValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(teamListComp);

        jPanel3.add(jScrollPane1, "CONTENT");
        jPanel3.add(waitPane1, "WAIT");
        jPanel3.add(failPanel1, "FAIL");

        leftPane.add(jPanel3, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(leftPane);

        rightPane.setLayout(new java.awt.BorderLayout());

        teamMemberBar.setFloatable(false);
        teamMemberBar.setRollover(true);

        memberRefreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/refresh_16.png"))); // NOI18N
        memberRefreshBtn.setText("刷新");
        memberRefreshBtn.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        memberRefreshBtn.setFocusable(false);
        memberRefreshBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        memberRefreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberRefreshBtnActionPerformed(evt);
            }
        });
        teamMemberBar.add(memberRefreshBtn);

        memberAddBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/add_16.png"))); // NOI18N
        memberAddBtn.setText("添加");
        memberAddBtn.setFocusable(false);
        memberAddBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        memberAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberAddBtnActionPerformed(evt);
            }
        });
        teamMemberBar.add(memberAddBtn);

        memberDelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/delete_16.png"))); // NOI18N
        memberDelBtn.setText("删除");
        memberDelBtn.setFocusable(false);
        memberDelBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        memberDelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberDelBtnActionPerformed(evt);
            }
        });
        teamMemberBar.add(memberDelBtn);

        rightPane.add(teamMemberBar, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.CardLayout());

        jScrollPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        memberTableComp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        memberTableComp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(memberTableComp);

        jPanel4.add(jScrollPane2, "CONTENT");
        jPanel4.add(waitPane2, "WAIT");
        jPanel4.add(failPanel2, "FAIL");
        jPanel4.add(generalMessagePanel1, "EMPTY");

        rightPane.add(jPanel4, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(rightPane);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTeamBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTeamBtnActionPerformed
        queryAllTeamsAgent.start();
    }//GEN-LAST:event_refreshTeamBtnActionPerformed
    
    //点击增加团队
    private void addTeamBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTeamBtnActionPerformed
        AddOrUpdateTeamPanel addTeamPane = new AddOrUpdateTeamPanel();
        Team team = addTeamPane.showMe(this);
        if (team != null) {
            refreshTeamBtnActionPerformed(evt);
        }
    }//GEN-LAST:event_addTeamBtnActionPerformed

    private void deleteTeamBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTeamBtnActionPerformed
        deleteTeamAgent.setTeam(curTeam);
        DeleteOperationPanel<Team> deletePane = new DeleteOperationPanel<>(deleteTeamAgent);
        deletePane.configSingleDelete("团队", curTeam.getTeamName() );
        Team team1 = deletePane.showMe(deleteTeamBtn, ClientUtils.buildImageIcon("del_team.png"), "删除团队信息", 400, 150);
        if (team1 != null) {
            refreshTeamBtnActionPerformed(null);
        }
    }//GEN-LAST:event_deleteTeamBtnActionPerformed

    private void updateTeamBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTeamBtnActionPerformed
        AddOrUpdateTeamPanel editPane = new AddOrUpdateTeamPanel();
        editPane.initPaneContent(curTeam);
        Team team = editPane.showMe(this);
        if (team != null) {
            teamListModel.update(team);
            selectingTeam();
        }
    }//GEN-LAST:event_updateTeamBtnActionPerformed
    
    //增加团队成员
    private void memberAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberAddBtnActionPerformed
        AddTeamMemberPanel addPanel = new AddTeamMemberPanel();
        memberLis = addPanel.showMe(this,curTeam.getTeamId());
        
        if (memberLis != null) {
            memberRefreshBtnActionPerformed(null);
        }
    }//GEN-LAST:event_memberAddBtnActionPerformed

    private void memberRefreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberRefreshBtnActionPerformed
        queryTeamMembersAgent.setParameters(curTeam.getTeamId());
        queryTeamMembersAgent.start();
    }//GEN-LAST:event_memberRefreshBtnActionPerformed
    
    //删除团队成员
    private void memberDelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberDelBtnActionPerformed
        deleteTeamMemberAgent.setTeamMemberWrap(curMemberWrap);
        
        DeleteOperationPanel<TeamMemberWrap> deletePane = new DeleteOperationPanel<>(deleteTeamMemberAgent);
            deletePane.configSingleDelete("团队成员", curMemberWrap.getUser().getName() );
            TeamMemberWrap teamMember1 = deletePane.showMe(memberDelBtn, ClientUtils.buildImageIcon("del_member.png"), "删除团队成员", 400, 150);
            if (teamMember1 != null) {
                memberRefreshBtnActionPerformed(null);
            }
    }//GEN-LAST:event_memberDelBtnActionPerformed

    private void teamListCompValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_teamListCompValueChanged
        if (!evt.getValueIsAdjusting()) {
            selectingTeam();
        }
    }//GEN-LAST:event_teamListCompValueChanged
    //根据左边团队，显示右边的成员
    private void selectingTeam() {
        int index = teamListComp.getSelectedIndex();
        if (index >= 0) {
            curTeam = teamListModel.get(index);
            updateTeamBtn.setEnabled(true);
            deleteTeamBtn.setEnabled(true);
            memberRefreshBtnActionPerformed(null); //TODO刷新右侧
        } else {
            curTeam = null;
            //团队为空，禁用刷新，添加以外的所有按钮
            deleteTeamBtn.setEnabled(false);
            updateTeamBtn.setEnabled(false);
            memberRefreshBtn.setEnabled(false);
            memberAddBtn.setEnabled(false);
            memberDelBtn.setEnabled(false);
            waitPane2.setIndeterminate(false);
            teamListComp.setEnabled(true);
        }
    }
        
    //选择团队成员
    private void selectingTeamMember() {
        int index = memberTableComp.getSelectedRow();
        if (index >= 0) {
            index = memberTableComp.convertRowIndexToModel(index);
            curMemberWrap = memberTableModel.getData(index);
            memberDelBtn.setEnabled(true);
        } else {
            curMemberWrap = null;
            memberDelBtn.setEnabled(false);
        }
    }
    
    //增加团队成员后，刷新界面
    public void refreshMember(){
        memberRefreshBtnActionPerformed(null);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTeamBtn;
    private javax.swing.JButton deleteTeamBtn;
    private com.nazca.ui.FailedInfoPanel failPanel1;
    private com.nazca.ui.FailedInfoPanel failPanel2;
    private com.yz.ams.client.ui.GeneralMessagePanel generalMessagePanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel leftPane;
    private javax.swing.JButton memberAddBtn;
    private javax.swing.JButton memberDelBtn;
    private javax.swing.JButton memberRefreshBtn;
    private javax.swing.JTable memberTableComp;
    private javax.swing.JButton refreshTeamBtn;
    private javax.swing.JPanel rightPane;
    private javax.swing.JList<String> teamListComp;
    private javax.swing.JToolBar teamMemberBar;
    private javax.swing.JButton updateTeamBtn;
    private com.nazca.ui.NWaitingPanel waitPane1;
    private com.nazca.ui.NWaitingPanel waitPane2;
    // End of variables declaration//GEN-END:variables
   
    private AgentListener<List<Team>> queryAllTeamsAgentLis = new AgentListener<List<Team>>() {
        @Override
        public void onStarted(long seq) {
            timeSeq = seq;
            setBtnEnabled(false);
            
            waitPane1.showMsgMode("数据加载中，请稍候...", 0, NWaitingPanel.MSG_MODE_INFO);
            waitPane1.showWaitingMode();
            waitPane1.setIndeterminate(true);
            card1.show(CardLayoutWrapper.WAIT);
            waitPane2.showMsgMode("数据加载中，请稍候...", 0, NWaitingPanel.MSG_MODE_INFO);
            waitPane2.showWaitingMode();
            waitPane2.setIndeterminate(true);
            card2.show(CardLayoutWrapper.WAIT);
        }

        @Override
        public void onSucceeded(List<Team> result, long seq) {
            if(seq == timeSeq){
                teamListModel.setObjectList(result);
                jScrollPane1.getVerticalScrollBar().setValue(0);
                card1.show(CardLayoutWrapper.CONTENT);
                if (!result.isEmpty()) {
                    teamListComp.setSelectedIndex(0);
                }else{
                    waitPane2.setIndeterminate(false);
                    waitPane1.showWaitingMode();
                    waitPane1.showMsgMode("暂无团队信息", 0, NWaitingPanel.MSG_MODE_INFO);
                    card1.show(CardLayoutWrapper.WAIT);
                    waitPane2.showWaitingMode();
                    waitPane2.showMsgMode("暂无成员信息", 0, NWaitingPanel.MSG_MODE_INFO);
                    card2.show(CardLayoutWrapper.WAIT);
                }
                refreshTeamBtn.setEnabled(true);
                addTeamBtn.setEnabled(true);
            }
        }

        @Override
        public void onFailed(String errMsg, int errCode, long seq) {
            if(seq == timeSeq){
                failPanel1.setFailedInfo(errMsg, errCode);
                card1.show(CardLayoutWrapper.FAIL);
                waitPane1.setIndeterminate(false);

                failPanel2.setFailedInfo(errMsg, errCode);
                card2.show(CardLayoutWrapper.FAIL);
                waitPane2.setIndeterminate(false);

                refreshTeamBtn.setEnabled(true);
            }
        }
    };
    
    private AgentListener<List<TeamMemberWrap>> querTeamMembersAgentLis = new AgentListener<List<TeamMemberWrap>>() {
        @Override
        public void onStarted(long seq) {
            timeSeq_queryMember = seq;
            setBtnEnabled(false);
            
            waitPane2.setIndeterminate(true);
            waitPane2.showMsgMode("数据加载中，请稍后...", 0, NWaitingPanel.MSG_MODE_INFO);
            waitPane2.showWaitingMode();
            card2.show(CardLayoutWrapper.WAIT);
        }

        @Override
        public void onSucceeded(List<TeamMemberWrap> result, long seq) {
            if(seq == timeSeq_queryMember){
                memberTableModel.setDatas(result);
                card2.show(CardLayoutWrapper.CONTENT);
                refreshTeamBtn.setEnabled(true);
                addTeamBtn.setEnabled(true);
                deleteTeamBtn.setEnabled(true);
                updateTeamBtn.setEnabled(true);
                memberRefreshBtn.setEnabled(true);
                memberAddBtn.setEnabled(true);
                if (!result.isEmpty()) {
                    memberTableComp.getSelectionModel().setSelectionInterval(0, 0);
                }
            }
        }

        @Override
        public void onFailed(String errMsg, int errCode, long seq) {
            if(seq == timeSeq_queryMember){
                waitPane2.setIndeterminate(false);
                card2.show(CardLayoutWrapper.FAIL);
                refreshTeamBtn.setEnabled(true);
                addTeamBtn.setEnabled(true);
                deleteTeamBtn.setEnabled(true);
                updateTeamBtn.setEnabled(true);
                memberRefreshBtn.setEnabled(true);
            }
        }
    };
    
    public void init() {
        refreshTeamBtnActionPerformed(null);
    }

}
