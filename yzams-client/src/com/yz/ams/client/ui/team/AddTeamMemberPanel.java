/*
 * AddTeamMemberPanel.java
 * 
 * Copyright(c) 2007-2016 by Yingzhi Tech
 * All Rights Reserved
 * 
 * Created at 2016-06-03 09:46:04
 */
package com.yz.ams.client.ui.team;

import com.nazca.ui.NInternalDiag;
import com.nazca.ui.NInternalDiagListener;
import com.nazca.ui.NWaitingPanel;
import com.nazca.ui.util.CardLayoutWrapper;
import com.nazca.util.TimeFairy;
import com.yz.ams.client.OKCancelPanelListener;
import com.yz.ams.client.agent.AddTeamMemberAgent;
import com.yz.ams.client.agent.AgentListener;
import com.yz.ams.client.agent.QueryAllEmployeeAgent;
import com.yz.ams.client.model.EmployeeListModel;
import com.yz.ams.client.util.ClientUtils;
import com.yz.ams.model.Employee;
import com.yz.ams.model.TeamMember;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.swing.JComponent;
import javax.swing.SwingUtilities;

/**
 *
 * @author 曹慧英 <caohuiying@yzhtech.com>
 */
public class AddTeamMemberPanel extends javax.swing.JPanel {
    private CardLayoutWrapper card = null;
    private EmployeeListModel listModel = null;
    private QueryAllEmployeeAgent queryEmployeeAgent = null;
    private AddTeamMemberAgent  addTeamMemberAgent = null;
    private List<TeamMember> memberList = null;
    private List<Employee> list = null;
   //private BatchUpdateEmployeeAgent updateDistrictsAgent = null;
    //private PublishStatus publishType = null;
    private String teamId;
    private String userid;
    /**
     * Creates new form AddTeamMemberPanel
     */
    public AddTeamMemberPanel() {
        initComponents();
        card = new CardLayoutWrapper(cardPane);
        listModel = new EmployeeListModel();
        employeeListComp.setModel(listModel);
        memberList = new ArrayList<>();
        initAgent();
    }
    
    private void initAgent(){
        queryEmployeeAgent = new QueryAllEmployeeAgent();
        queryEmployeeAgent.addListener(agentListener);
        addTeamMemberAgent = new AddTeamMemberAgent();
        addTeamMemberAgent.addListener(addMemberAgentListener);
        
        oKCancelPane.addOKCancelListener(new OKCancelPanelListener() {
            @Override
            public void onOKClicked() {
               if (validateIsSelected()) {
                   oKCancelPane.gotoNormalMode();
                    list = listModel.getAllSelectedNominals();
                    for(Employee employee : list){
                        TeamMember teamMember = new TeamMember();
                        teamMember.setMemberId(UUID.randomUUID().toString());
                        teamMember.setUserID(employee.getUserId());
                        teamMember.setEntryTime(employee.getEntryTime());
                        teamMember.setTeamId(teamId);
                        memberList.add(teamMember);
                    }
                    addTeamMemberAgent.setParam(memberList);
                    addTeamMemberAgent.start();
                }
            }

            @Override
            public void onCancelClicked() {
                NInternalDiag<List<TeamMember>, JComponent> diag = NInternalDiag.findNInternalDiag(
                        AddTeamMemberPanel.this);
                diag.hideDiag();
            }
        });
    }
    public List<TeamMember> showMe(JComponent parent,String teamId) {
        this.teamId = teamId;
        NInternalDiag<List<TeamMember>, JComponent> diag = new NInternalDiag<>("选择团队成员",  ClientUtils.buildImageIcon("add_member.png"), this);
        
        diag.addNInternalDiagListener(new NInternalDiagListener() {

            @Override
            public void onClosing(NInternalDiag nid) {}
                
            @Override
            public void onClosed(NInternalDiag nid) {
            }
            @Override
            public void onShowingDone(NInternalDiag nid) {
                refreshBtnActionPerformed(null);
            }
        });
        return diag.showInternalDiag(parent, NInternalDiag.INIT_SIZE_MODE_PREFERED);
    }
    
    private boolean validateIsSelected() {
        if (listModel.getAllSelectedNominals().isEmpty()) {
            oKCancelPane.gotoErrorMode("请至少选择一个团队成员!");
            return false;
        }
        return true;
    }
    
    private void setPaneEnabled(boolean flag) {
        jScrollPane1.setEnabled(flag);
        allLBtn.setEnabled(flag);
        inverseLBtn.setEnabled(flag);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jToolBar1 = new javax.swing.JToolBar();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(13, 0), new java.awt.Dimension(13, 0), new java.awt.Dimension(13, 32767));
        refreshBtn = new javax.swing.JButton();
        cardPane = new javax.swing.JPanel();
        contentPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeeListComp = new com.nazca.ui.TriStateList();
        inverseLBtn = new com.nazca.ui.NLinkButton();
        allLBtn = new com.nazca.ui.NLinkButton();
        waitPane = new com.nazca.ui.NWaitingPanel();
        failPane = new com.nazca.ui.FailedInfoPanel();
        oKCancelPane = new com.yz.ams.client.OKCancelPanel();

        setMaximumSize(new java.awt.Dimension(400, 400));
        setMinimumSize(new java.awt.Dimension(400, 400));
        setPreferredSize(new java.awt.Dimension(400, 400));
        setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setBorderPainted(false);
        jToolBar1.add(filler1);

        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/refresh_16.png"))); // NOI18N
        refreshBtn.setText("刷新");
        refreshBtn.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        refreshBtn.setFocusable(false);
        refreshBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        refreshBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshBtn);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        cardPane.setMinimumSize(new java.awt.Dimension(400, 460));
        cardPane.setPreferredSize(new java.awt.Dimension(400, 460));
        cardPane.setLayout(new java.awt.CardLayout());

        contentPane.setMaximumSize(new java.awt.Dimension(400, 2147483647));
        contentPane.setMinimumSize(new java.awt.Dimension(400, 460));
        contentPane.setPreferredSize(new java.awt.Dimension(400, 460));
        contentPane.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAlignmentX(5.0F);
        jScrollPane1.setEnabled(false);
        jScrollPane1.setOpaque(false);
        jScrollPane1.setVerifyInputWhenFocusTarget(false);

        employeeListComp.setFocusable(false);
        employeeListComp.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(employeeListComp);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 18, 2, 0);
        contentPane.add(jScrollPane1, gridBagConstraints);

        inverseLBtn.setLabel("反选");
        inverseLBtn.setTextBorderMargin(new java.awt.Insets(0, 0, 0, 0));
        inverseLBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inverseLBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 0);
        contentPane.add(inverseLBtn, gridBagConstraints);

        allLBtn.setText("全选");
        allLBtn.setTextBorderMargin(new java.awt.Insets(0, 0, 0, 0));
        allLBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allLBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(6, 23, 6, 3);
        contentPane.add(allLBtn, gridBagConstraints);

        cardPane.add(contentPane, "CONTENT");
        cardPane.add(waitPane, "WAIT");
        cardPane.add(failPane, "FAIL");

        add(cardPane, java.awt.BorderLayout.CENTER);
        add(oKCancelPane, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void inverseLBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inverseLBtnActionPerformed
        listModel.setReversSelected();
    }//GEN-LAST:event_inverseLBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        queryEmployeeAgent.start();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void allLBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allLBtnActionPerformed
        listModel.setAllSelected();
    }//GEN-LAST:event_allLBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.nazca.ui.NLinkButton allLBtn;
    private javax.swing.JPanel cardPane;
    private javax.swing.JPanel contentPane;
    private com.nazca.ui.TriStateList employeeListComp;
    private com.nazca.ui.FailedInfoPanel failPane;
    private javax.swing.Box.Filler filler1;
    private com.nazca.ui.NLinkButton inverseLBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private com.yz.ams.client.OKCancelPanel oKCancelPane;
    private javax.swing.JButton refreshBtn;
    private com.nazca.ui.NWaitingPanel waitPane;
    // End of variables declaration//GEN-END:variables
    AgentListener<List<Employee>> agentListener = new AgentListener<List<Employee>>() {
        @Override
        public void onStarted(long seq) {
            refreshBtn.setEnabled(false);
            waitPane.setIndeterminate(true);
            waitPane.showMsgMode("数据加载中，请稍后...", 0, NWaitingPanel.MSG_MODE_INFO);
            waitPane.showWaitingMode();
            card.show(CardLayoutWrapper.WAIT);
        }

        @Override
        public void onSucceeded(List<Employee> result, long seq) {
            listModel.setNominalList(result);
            waitPane.setIndeterminate(false);
            if(result != null && result.size() > 0){ //没有数据
                card.show(CardLayoutWrapper.CONTENT);
            }else{
                allLBtn.setEnabled(false);
                inverseLBtn.setEnabled(false);
                waitPane.showMsgMode("暂无员工信息", 0, NWaitingPanel.MSG_MODE_INFO);
            }
            refreshBtn.setEnabled(true);
        }
        
        @Override
        public void onFailed(String errMsg, int errCode, long seq) {
            failPane.setFailedInfo(errMsg, errCode);
            
            card.show(CardLayoutWrapper.FAIL);
            waitPane.setIndeterminate(false);
        }
        
    };
    
    AgentListener<List<TeamMember>> addMemberAgentListener = new AgentListener<List<TeamMember>>() {
        @Override
        public void onStarted(long seq) {
            refreshBtn.setEnabled(false);
            allLBtn.setEnabled(false);
            inverseLBtn.setEnabled(false);
            employeeListComp.setEnabled(false);
            oKCancelPane.gotoWaitMode("正在添加团队成员...");
        }

        @Override
        public void onSucceeded(List<TeamMember> result, long seq) {
            oKCancelPane.gotoWaitMode("添加团队成员成功！");
            new Thread() {
                @Override
                public void run() {
                    new TimeFairy().sleepIfNecessary();
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            NInternalDiag<List<TeamMember>, JComponent> diag = NInternalDiag.findNInternalDiag(
                                AddTeamMemberPanel.this);
                            diag.hideDiag(result);
                        }
                    });
                }
            }.start();
        }
        
        @Override
        public void onFailed(String errMsg, int errCode, long seq) {
            refreshBtn.setEnabled(true);
            allLBtn.setEnabled(true);
            inverseLBtn.setEnabled(true);
            employeeListComp.setEnabled(true);
            oKCancelPane.gotoErrorMode(errMsg, errCode);
        }
    };
    
    public void init() {
        refreshBtnActionPerformed(null);
    }

}
