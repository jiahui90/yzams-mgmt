/*
 * RestMgmtPanel.java
 * 
 * Copyright(c) 2007-2016 by Yingzhi Tech
 * All Rights Reserved
 * 
 * Created at 2016-02-17 10:32:53
 */
package com.yz.ams.client.ui.rest;

import com.nazca.sql.PageResult;
import com.nazca.ui.NWaitingPanel;
import com.nazca.ui.TextHinter;
import com.nazca.ui.UIUtilities;
import com.nazca.ui.laf.border.IconLabelBorder;
import com.nazca.ui.pagination.PaginationListener;
import com.nazca.ui.pagination.TablePageSession;
import com.nazca.ui.util.CardLayoutWrapper;
import com.nazca.usm.model.USMSUser;
import com.yz.ams.client.ClientContext;
import com.yz.ams.client.DeleteOperationPanel;
import com.yz.ams.client.agent.AgentListener;
import com.yz.ams.client.agent.DeleteRestAgent;
import com.yz.ams.client.agent.QueryRestAgent;
import com.yz.ams.client.model.RestTableMode;
import com.yz.ams.model.Rest;
import com.yz.ams.client.renderer.RestTableRenderer;
import com.yz.ams.client.util.ClientUtils;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Your Name <Song Haixiang >
 */
public class RestMgmtPanel extends javax.swing.JPanel {

    private CardLayoutWrapper leftCard = null;
    private IconLabelBorder mainBorder = null;
    private RestTableMode tableModel = null;
    private RestTableRenderer tableRenderer = null;
    private QueryRestAgent QueryRestAgent = null;
    private Rest curRest = null;
    private DeleteRestAgent deleteAgent = null;

    /**
     * Creates new form RestMgmtPanel
     */
    public RestMgmtPanel() {
        initComponents();
        initCommon();
        initModelAndRenderer();
        initUI();
        initAgentAndListener();
        init();
    }

    private void initCommon() {
        leftCard = new CardLayoutWrapper(cardPane1);

    }

    private void initModelAndRenderer() {
        tableModel = new RestTableMode();
        tableComp.setModel(tableModel);
        tableRenderer = new RestTableRenderer();
        tableComp.setDefaultRenderer(Object.class, tableRenderer);
        TableRowSorter<TableModel> rightRowSorter = UIUtilities.generateAndSetTriStateRowSorter(tableComp, tableModel);
        tableComp.setRowSorter(rightRowSorter);
    }

    private void initUI() {
        UIUtilities.attachSearchIcon(searchTxFd);
        TextHinter.attach("输入内容并回车", searchTxFd);
    }

    private void initAgentAndListener() {
        deleteAgent = new DeleteRestAgent();
        QueryRestAgent = new QueryRestAgent();
        QueryRestAgent.addListener(queryRestAgentLis);
        QueryRestAgent.start();
        pagePane.addPaginationListener(new PaginationListener() {//分页数据监听
            @Override
            public void onPageChanged(TablePageSession page) {
                refreshBtnActionPerformed(null);
            }
        });
        
        tableComp.getSelectionModel().addListSelectionListener(new ListSelectionListener() {//分页监听
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    selectingVacation();
                }
            }
        });
        searchTxFd.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (KeyEvent.VK_ENTER == e.getKeyCode()) {
                    refreshBtnActionPerformed(null);
                }
            }
        });
    }

    private void selectingVacation() {
        int idx = tableComp.getSelectedRow();
        if (idx >= 0) {
            idx = tableComp.convertRowIndexToModel(idx);
            curRest = tableModel.getData(idx);
            updateBtn.setEnabled(true);
            deleteBtn.setEnabled(true);
        } else {
            updateBtn.setEnabled(false);
            deleteBtn.setEnabled(false);
        }
    }

    private void setCompsEnabled(boolean enabled) {//操作时禁用所有按钮
        refreshBtn.setEnabled(enabled);
        addBtn.setEnabled(enabled);
        updateBtn.setEnabled(enabled);
        deleteBtn.setEnabled(enabled);
        searchTxFd.setEnabled(enabled);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jPanel11 = new javax.swing.JPanel();
        jToolBar4 = new javax.swing.JToolBar();
        refreshBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        searchTxFd = new javax.swing.JTextField();
        cardPane1 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableComp = new javax.swing.JTable();
        pagePane = new com.nazca.ui.pagination.PaginationPanel();
        waitPane = new com.nazca.ui.NWaitingPanel();

        jPanel3.setLayout(new java.awt.BorderLayout());

        setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.BorderLayout());

        jToolBar4.setFloatable(false);

        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/refresh_16.png"))); // NOI18N
        refreshBtn.setText("刷新");
        refreshBtn.setFocusable(false);
        refreshBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        jToolBar4.add(refreshBtn);

        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/add_16.png"))); // NOI18N
        addBtn.setText("添加");
        addBtn.setFocusable(false);
        addBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        jToolBar4.add(addBtn);

        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/update-16.png"))); // NOI18N
        updateBtn.setText("修改");
        updateBtn.setFocusable(false);
        updateBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        jToolBar4.add(updateBtn);

        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/ams/client/res/delete_16.png"))); // NOI18N
        deleteBtn.setText("删除");
        deleteBtn.setFocusable(false);
        deleteBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        jToolBar4.add(deleteBtn);
        jToolBar4.add(filler5);

        searchTxFd.setMaximumSize(new java.awt.Dimension(150, 21));
        searchTxFd.setMinimumSize(new java.awt.Dimension(150, 21));
        searchTxFd.setPreferredSize(new java.awt.Dimension(150, 21));
        jToolBar4.add(searchTxFd);

        jPanel11.add(jToolBar4, java.awt.BorderLayout.NORTH);

        cardPane1.setLayout(new java.awt.CardLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane4.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        tableComp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableComp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(tableComp);

        jPanel1.add(jScrollPane4, java.awt.BorderLayout.CENTER);
        jPanel1.add(pagePane, java.awt.BorderLayout.PAGE_END);

        cardPane1.add(jPanel1, "CONTENT");
        cardPane1.add(waitPane, "WAIT");

        jPanel11.add(cardPane1, java.awt.BorderLayout.CENTER);

        add(jPanel11, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        String keywords = searchTxFd.getText().trim();
        if (keywords.isEmpty()) {
            keywords = null;
        }
        TablePageSession page = pagePane.getPageSession();
        QueryRestAgent.setParameters(keywords, page.getCurPageNum(), page.getPageSize());
        QueryRestAgent.start();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        AddOrUpdateRestPanel editPane = new AddOrUpdateRestPanel();
        Rest rest = editPane.showMe(this);
        if (rest != null) {
            refreshBtnActionPerformed(evt);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        AddOrUpdateRestPanel editPane = new AddOrUpdateRestPanel();
        editPane.setPaneContent(curRest);
        Rest rest = editPane.showMe1(this);
        if (rest != null) {
            refreshBtnActionPerformed(evt);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int row = tableComp.getSelectedRow();
        if (row >= 0) {
            row = tableComp.convertRowIndexToModel(row);
            Rest data = tableModel.getData(row);
            USMSUser curUser = ClientContext.getUser();
            data.setModifierId(curUser.getId());
            data.setModifierName(curUser.getName());            
            deleteAgent.setRest(data);
            DeleteOperationPanel<Rest> deletePane = new DeleteOperationPanel<>(deleteAgent);
            deletePane.configSingleDelete("申请人", data.getUserName());
            Rest rest = deletePane.showMe(deleteBtn, ClientUtils.buildImageIcon("delete-rest.png"), "删除调休信息", 400, 150);
            if (rest != null) {
                refreshBtnActionPerformed(null);
            }
        } else {
            UIUtilities.warningDlg(this, "请先选择要删除的调休信息");
            return;
        }
    }//GEN-LAST:event_deleteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JPanel cardPane1;
    private javax.swing.JButton deleteBtn;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToolBar jToolBar4;
    private com.nazca.ui.pagination.PaginationPanel pagePane;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTextField searchTxFd;
    private javax.swing.JTable tableComp;
    private javax.swing.JButton updateBtn;
    private com.nazca.ui.NWaitingPanel waitPane;
    // End of variables declaration//GEN-END:variables

    private AgentListener<PageResult<Rest>> queryRestAgentLis = new AgentListener<PageResult<Rest>>() {
        @Override
        public void onStarted(long seq) {
            setCompsEnabled(false);
            waitPane.setIndeterminate(true);
            waitPane.showMsgMode("数据加载中，请稍后...", 0, NWaitingPanel.MSG_MODE_INFO);
            waitPane.showWaitingMode();
            leftCard.show(CardLayoutWrapper.WAIT);
        }

        @Override
        public void onSucceeded(PageResult<Rest> result, long seq) {
            if (result != null && result.getTotalCount() > 0) {//判断是否为空
                List<Rest> list = result.getPageList();//数据集合
                int totalCount = result.getTotalCount();//当前页
                int pageSize = result.getPageSize();//每页条数
                tableModel.setDatas(list);
                waitPane.setIndeterminate(false);
                leftCard.show(CardLayoutWrapper.CONTENT);
                tableComp.getSelectionModel().setSelectionInterval(0, 0);
                pagePane.initPageButKeepSession(totalCount, pageSize);
            } else {
                selectingVacation();
                updateBtn.setEnabled(false);
                deleteBtn.setEnabled(false);
                waitPane.showMsgMode("暂无调休信息", 0, NWaitingPanel.MSG_MODE_INFO);
                leftCard.show(CardLayoutWrapper.WAIT);
            }
            refreshBtn.setEnabled(true);
            addBtn.setEnabled(true);
            searchTxFd.setEnabled(true);
        }

        @Override
        public void onFailed(String errMsg, int errCode, long seq) {
            refreshBtn.setEnabled(true);
            addBtn.setEnabled(true);
            searchTxFd.setEnabled(true);
            waitPane.showMsgMode(errMsg, errCode, NWaitingPanel.MSG_MODE_ERROR);
            leftCard.show(CardLayoutWrapper.FAIL);
            waitPane.setIndeterminate(false);
        }

    };

    public void init() {
        refreshBtnActionPerformed(null);
    }
}
