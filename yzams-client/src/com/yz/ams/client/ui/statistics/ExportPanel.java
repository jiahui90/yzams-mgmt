/*
 * ExportPanel.java
 * 
 * Copyright(c) 2007-2016 by Yingzhi Tech
 * All Rights Reserved
 * 
 * Created at 2016-06-23 15:12:17
 */
package com.yz.ams.client.ui.statistics;

import com.nazca.ui.NInternalDiag;
import com.nazca.ui.NLabelMessageTool;
import com.nazca.ui.TextHinter;
import com.nazca.ui.UIUtilities;
import com.nazca.util.TimeFairy;
import com.vsd.client.util.FileFilterFactory;
import com.vsd.common.model.enums.FileType;
import com.yz.ams.client.OKCancelPanelListener;
import com.yz.ams.client.ClientConfig;
import com.yz.ams.client.util.ClientUtils;
import com.yz.ams.model.wrap.mgmt.AttendanceMgmtStat;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.ss.usermodel.Sheet; 

/**
 *
 * @author Zhao Hongkun <zhaohongkun@yzhtech.com>
 */
public class ExportPanel extends javax.swing.JPanel {

    private File exportFile = null;
    private TextHinter pathHinter = null;
    private String path = null;
    private FileType fileType = FileType.excel;
    private String exportType = null;
    private String fileName = "考勤统计报表";
    private String titleName = "";
    private NInternalDiag<String, JComponent> diag = null;
    private List<AttendanceMgmtStat> staLis = null;

    public void setStaLis(List<AttendanceMgmtStat> staLis) {
        this.staLis = staLis;
    }

    /**
     * Creates new form ExportPanel
     */
    public ExportPanel() {
        initComponents();
        pathHinter = new TextHinter("导出路径不能为空", exportPathTxFd, NLabelMessageTool.ERROR_COLOR);
        pathHinter.hideMe();
        excelRdBtn.setSelected(true);
        oKCancelPanel1.addOKCancelListener(new OKCancelPanelListener() {
            @Override
            public void onOKClicked() {
                if (validateExportPath()) {
                    writeAttendanceMgmtStatToExcel(exportFile, staLis);
                    new Thread() {
                        public void run() {
                            new TimeFairy().sleepIfNecessary();
                            diag.hideDiag();
                        }
                    }.start();
                }

            }

            @Override
            public void onCancelClicked() {
                diag.hideDiag();
            }
        });

    }

    private boolean validateExportPath() {
        if (exportPathTxFd.getText().trim().isEmpty()) {
            oKCancelPanel1.setErrorText("导出路径不能为空!");
            pathHinter.showMe();
            return false;
        }
        return true;
    }

    public void setExportType(String exportType) {
        this.exportType = exportType;
    }

    public String showMe(JComponent Parent) {
        oKCancelPanel1.setOKText("导出");
        diag = new NInternalDiag<String, JComponent>("导出考勤信息", ClientUtils.buildImageIcon("export-attendence.png"), this, 470, 190);
        return diag.showInternalDiag(Parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fileTypeLb = new javax.swing.JLabel();
        excelRdBtn = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        exportPathTxFd = new javax.swing.JTextField();
        browseBtn = new javax.swing.JButton();
        oKCancelPanel1 = new com.yz.ams.client.OKCancelPanel();

        jLabel1.setText("您即将导出考勤信息");

        fileTypeLb.setText("文件类型：");

        excelRdBtn.setText("EXCEL");
        excelRdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelRdBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("导出路径：");

        exportPathTxFd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportPathTxFdMouseClicked(evt);
            }
        });
        exportPathTxFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                exportPathTxFdKeyPressed(evt);
            }
        });

        browseBtn.setText("浏览");
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportPathTxFd, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fileTypeLb)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(excelRdBtn)))
                        .addGap(0, 245, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(oKCancelPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileTypeLb)
                    .addComponent(excelRdBtn))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(exportPathTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(oKCancelPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void excelRdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelRdBtnActionPerformed
        fileType = FileType.excel;
    }//GEN-LAST:event_excelRdBtnActionPerformed

    private void exportPathTxFdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportPathTxFdMouseClicked
        browseBtn.doClick();
    }//GEN-LAST:event_exportPathTxFdMouseClicked

    private void exportPathTxFdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_exportPathTxFdKeyPressed
//        browseBtn.doClick();
    }//GEN-LAST:event_exportPathTxFdKeyPressed

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        exportPathTxFd.setText("");
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setCurrentDirectory(ClientConfig.getDefaultFolder());
        chooser.setFileFilter(FileFilterFactory.getFilter(FileType.excel));
        chooser.setSelectedFile(new File(fileName + FileFilterFactory.xlsxSuffix));
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            exportFile = chooser.getSelectedFile();
            String ext = FileFilterFactory.getExtension(exportFile);
            if (ext != null) {
                if ((ext.equals(FileFilterFactory.xlsx)) || (ext.equals(FileFilterFactory.XLSX))) {
                    int i = exportFile.getName().lastIndexOf(".");
                    String fileName = exportFile.getName().substring(0, i);
                    exportFile = new File(chooser.getCurrentDirectory().getAbsolutePath() + File.separator + fileName
                            + FileFilterFactory.xlsxSuffix);
                }
            } else {
                exportFile = new File(chooser.getCurrentDirectory().getAbsolutePath() + File.separator + exportFile.
                        getName() + FileFilterFactory.xlsxSuffix);
            }
            if (exportFile.exists()) {
                if (UIUtilities.yesNoDlg(getParent(), "询问", "文件已存在，是否替换？")) {
                    exportFile.delete();
                } else {
                    return;
                }
            }
            path = (chooser.getSelectedFile()).toString();
            exportPathTxFd.setText(path);
            ClientConfig.setDefaultFolder(path);
        }
    }//GEN-LAST:event_browseBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseBtn;
    private javax.swing.JRadioButton excelRdBtn;
    private javax.swing.JTextField exportPathTxFd;
    private javax.swing.JLabel fileTypeLb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private com.yz.ams.client.OKCancelPanel oKCancelPanel1;
    // End of variables declaration//GEN-END:variables
private void writeAttendanceMgmtStatToExcel(File file, List<AttendanceMgmtStat> list) {
        SXSSFWorkbook book = null;
        try {
            String sheetName = "方向";
            String[] columnTitle = {"姓名", "工号", "法定工作日", "正常出勤", "年假", "事假", "病假", "其它假", "出差", "调休", "旷工", "轻微迟到", "处罚轻微迟到次数", "迟到", "严重差迟到", "早退"};
            Sheet sheet = null;
            if (book == null) {
                book = new SXSSFWorkbook();
                sheet = book.createSheet(sheetName);
                //标题
                Row title = sheet.createRow(0);
                for (int i = 0; i < columnTitle.length; i++) {
                    title.createCell(i).setCellValue(columnTitle[i]);
                }
            } else {
                sheet = book.getSheet(sheetName);
            }
            //生成数据
            for (int row = 1; row <= list.size(); row++) {
                AttendanceMgmtStat info = list.get(row - 1);
                Row excelRow = sheet.createRow(row);
                excelRow.createCell(0).setCellValue(info.getUserName());
                excelRow.createCell(1).setCellValue(info.getJobNumber());
                excelRow.createCell(2).setCellValue(info.getLegalAttendanceDays());
                excelRow.createCell(3).setCellValue(info.getNormalAttendanceDays());
                excelRow.createCell(4).setCellValue(info.getAnnualLeaveDays());
                excelRow.createCell(5).setCellValue(info.getPersonalDays());
                excelRow.createCell(6).setCellValue(info.getSickDays());
                excelRow.createCell(7).setCellValue(info.getPaidLegaDays());
                excelRow.createCell(8).setCellValue(info.getBusinessDays());
                excelRow.createCell(9).setCellValue(info.getRestDays());
                excelRow.createCell(10).setCellValue(info.getAbsentDays());
                excelRow.createCell(11).setCellValue(info.getLightLateTime());
                excelRow.createCell(12).setCellValue(info.getPunishmentLightLateTime());
                excelRow.createCell(13).setCellValue(info.getLateTime());
                excelRow.createCell(14).setCellValue(info.getSeriousLateTime());
                excelRow.createCell(15).setCellValue(info.getEarlyTime());
            }
            FileOutputStream fileOut = new FileOutputStream(file);
            book.write(fileOut);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
