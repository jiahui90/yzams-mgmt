/*
 * ModifyRulesPanel.java
 * 
 * Copyright(c) 2007-2016 by Yingzhi Tech
 * All Rights Reserved
 * 
 * Created at 2016-06-07 12:25:01
 */
package com.yz.ams.client.ui.RulesMgmt;

import com.nazca.ui.NComponentStyleTool;
import com.nazca.ui.NInternalDiag;
import com.nazca.ui.NLabelMessageTool;
import com.nazca.usm.model.USMSUser;
import com.yz.ams.client.ClientContext;
import com.yz.ams.client.agent.AgentListener;
import com.yz.ams.client.agent.ModifyRulesAgent;
import com.yz.ams.client.util.ClientUtils;
import com.yz.ams.consts.SystemParamKey;
import com.yz.ams.model.SystemParam;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComponent;
import javax.swing.border.TitledBorder;

/**
 *修改规则信息的面板
 * @author 赵洪坤 <zhaohongkun@yzhtech.com>
 */
public class ModifyRulesPanel extends javax.swing.JPanel {

     private NInternalDiag<List<SystemParam>, JComponent> diag = null;
     private List<SystemParam> systemParamList = null;
     public List<SystemParam> systemParamListOld = null;
    /**
     * Creates new form ModifyRulesPanel
     */
    public ModifyRulesPanel() {
        initComponents();
        initUI();
    }
     private void initUI() {
        NComponentStyleTool.goodNewsStyle(updateBtn);
        workYearPanel.setBorder(new TitledBorder(null, "年假天数", TitledBorder.LEADING, TitledBorder.TOP, null, null));
        latePanel.setBorder(new TitledBorder(null, "迟到时间", TitledBorder.LEADING, TitledBorder.TOP, null,  null));
        workTimePanel1.setBorder(new TitledBorder(null, "上班时间", TitledBorder.LEADING, TitledBorder.TOP, null, null));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        nActionPane1 = new com.nazca.ui.NActionPane();
        cancelBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        systemParaPanel = new javax.swing.JPanel();
        workTimePanel1 = new javax.swing.JPanel();
        amEndTimeLb = new javax.swing.JLabel();
        amStartTimeLb = new javax.swing.JLabel();
        amEndTimeTxFd = new javax.swing.JTextField();
        amStartTimeTxFd = new javax.swing.JTextField();
        pmStartTimeTxFd = new javax.swing.JTextField();
        pmStartTimeLb = new javax.swing.JLabel();
        pmEndTimeLb = new javax.swing.JLabel();
        pmEndTimeTxFd = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        workYearPanel = new javax.swing.JPanel();
        yearCountTwentyLb = new javax.swing.JLabel();
        yearCountOneTxFd = new javax.swing.JTextField();
        yearCountTenTxFd = new javax.swing.JTextField();
        yearCountTenLb = new javax.swing.JLabel();
        yearCountInnerLb = new javax.swing.JLabel();
        yearCountTwentyTxFd = new javax.swing.JTextField();
        yearCountOneLb = new javax.swing.JLabel();
        yearCountInnerTxFd = new javax.swing.JTextField();
        year1Lb = new javax.swing.JLabel();
        year2Lb = new javax.swing.JLabel();
        year3Lb = new javax.swing.JLabel();
        innerYearLb = new javax.swing.JLabel();
        latePanel = new javax.swing.JPanel();
        slightLateLb = new javax.swing.JLabel();
        lateTxFd = new javax.swing.JTextField();
        lateLb = new javax.swing.JLabel();
        slightLateTxFd = new javax.swing.JTextField();
        seriousLateLb = new javax.swing.JLabel();
        seriousLateTxFd = new javax.swing.JTextField();
        lightLb = new javax.swing.JLabel();
        normalLateLb = new javax.swing.JLabel();
        seriouseLb = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        nActionPane1.setMinimumSize(new java.awt.Dimension(240, 40));
        nActionPane1.setPreferredSize(new java.awt.Dimension(240, 40));

        cancelBtn.setText("取消");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        nActionPane1.add(cancelBtn);

        updateBtn.setText("确定");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        nActionPane1.add(updateBtn);

        add(nActionPane1, java.awt.BorderLayout.PAGE_END);

        workTimePanel1.setAutoscrolls(true);
        workTimePanel1.setLayout(new java.awt.GridBagLayout());

        amEndTimeLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        amEndTimeLb.setText("上午结束时间：");
        amEndTimeLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workTimePanel1.add(amEndTimeLb, gridBagConstraints);

        amStartTimeLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        amStartTimeLb.setText("上午开始时间：");
        amStartTimeLb.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        amStartTimeLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workTimePanel1.add(amStartTimeLb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workTimePanel1.add(amEndTimeTxFd, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workTimePanel1.add(amStartTimeTxFd, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workTimePanel1.add(pmStartTimeTxFd, gridBagConstraints);

        pmStartTimeLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pmStartTimeLb.setText("下午开始时间：");
        pmStartTimeLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workTimePanel1.add(pmStartTimeLb, gridBagConstraints);

        pmEndTimeLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pmEndTimeLb.setText("下午结束时间：");
        pmEndTimeLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workTimePanel1.add(pmEndTimeLb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workTimePanel1.add(pmEndTimeTxFd, gridBagConstraints);

        jLabel1.setText("　　");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workTimePanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("　　");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workTimePanel1.add(jLabel2, gridBagConstraints);

        workYearPanel.setLayout(new java.awt.GridBagLayout());

        yearCountTwentyLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        yearCountTwentyLb.setText("20年以上：");
        yearCountTwentyLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(yearCountTwentyLb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(yearCountOneTxFd, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(yearCountTenTxFd, gridBagConstraints);

        yearCountTenLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        yearCountTenLb.setText("10年至20年：");
        yearCountTenLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(yearCountTenLb, gridBagConstraints);

        yearCountInnerLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        yearCountInnerLb.setText("公司内部年假：");
        yearCountInnerLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(yearCountInnerLb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(yearCountTwentyTxFd, gridBagConstraints);

        yearCountOneLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        yearCountOneLb.setText("1年至10年：");
        yearCountOneLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(yearCountOneLb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(yearCountInnerTxFd, gridBagConstraints);

        year1Lb.setText("天　");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(year1Lb, gridBagConstraints);

        year2Lb.setText("天　");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(year2Lb, gridBagConstraints);

        year3Lb.setText("天　");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(year3Lb, gridBagConstraints);

        innerYearLb.setText("天　");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        workYearPanel.add(innerYearLb, gridBagConstraints);

        latePanel.setLayout(new java.awt.GridBagLayout());

        slightLateLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        slightLateLb.setText("轻微迟到：");
        slightLateLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        latePanel.add(slightLateLb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        latePanel.add(lateTxFd, gridBagConstraints);

        lateLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lateLb.setText("迟到：");
        lateLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        latePanel.add(lateLb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        latePanel.add(slightLateTxFd, gridBagConstraints);

        seriousLateLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        seriousLateLb.setText("严重迟到：");
        seriousLateLb.setPreferredSize(new java.awt.Dimension(95, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        latePanel.add(seriousLateLb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        latePanel.add(seriousLateTxFd, gridBagConstraints);

        lightLb.setText("分钟");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        latePanel.add(lightLb, gridBagConstraints);

        normalLateLb.setText("分钟");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        latePanel.add(normalLateLb, gridBagConstraints);

        seriouseLb.setText("分钟");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        latePanel.add(seriouseLb, gridBagConstraints);

        javax.swing.GroupLayout systemParaPanelLayout = new javax.swing.GroupLayout(systemParaPanel);
        systemParaPanel.setLayout(systemParaPanelLayout);
        systemParaPanelLayout.setHorizontalGroup(
            systemParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemParaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(systemParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(workTimePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                    .addComponent(workYearPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(latePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        systemParaPanelLayout.setVerticalGroup(
            systemParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemParaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(workTimePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(workYearPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(latePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(systemParaPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
         diag.hideDiag();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
          if(analysisContents()){
          ModifyRulesAgent modifyRulesAgent = new ModifyRulesAgent();
          List<SystemParam> systemParamList = getPaneContent();
          modifyRulesAgent.setSystemParamList(systemParamList);
          modifyRulesAgent.addListener(modifiySystemParamAgentLis);
          modifyRulesAgent.start();}
    }//GEN-LAST:event_updateBtnActionPerformed
    /**
     * 显示弹出框
     * @param parent
     * @return 
     */
    public List<SystemParam> showMe(JComponent parent) {
        diag = new NInternalDiag<>("修改规则", ClientUtils.buildImageIcon("modirule.png"), this, 506, 360);
        updateBtn.setText("确定");
        return diag.showInternalDiag(parent);
    }
    public void fillRulesPane(List<SystemParam> syss) {
        systemParamListOld = syss;
        for(int i=0;i<syss.size();i++){
         //上午开始时间
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.WORK_START_TIME_AM.name())){
            amStartTimeTxFd.setText(syss.get(i).getParamValue());
        }
        //上午结束时间
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.WORK_END_TIME_AM.name())){
            amEndTimeTxFd.setText(syss.get(i).getParamValue());
        }
        //下午开始时间
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.WORK_START_TIME_PM.name())){
            pmStartTimeTxFd.setText(syss.get(i).getParamValue());
        }
        //下午结束时间
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.WORK_END_TIME_PM.name())){
            pmEndTimeTxFd.setText(syss.get(i).getParamValue());
        }
        //轻微迟到
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.LIGHT_DELAY_MINUTES.name())){
            if(!syss.get(i).getParamValue().equals("")){
            slightLateTxFd.setText(syss.get(i).getParamValue());}else{
            slightLateTxFd.setText("0");
            }
        }
        //迟到
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.NORMAL_DELAY_MINUTES.name())){
            if(!syss.get(i).getParamValue().equals("")){
            lateTxFd.setText(syss.get(i).getParamValue());}else{
            lateTxFd.setText("0");
            }
        }
        //严重迟到
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.SERIOUS_DELAY_MINUTES.name())){
            if(!syss.get(i).getParamValue().equals("")){
            seriousLateTxFd.setText(syss.get(i).getParamValue());}else{
            seriousLateTxFd.setText("0");
            }
        }
        //1-10年
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.PAID_VACATION_ONE_YEAR.name())){
            if(!syss.get(i).getParamValue().equals("")){
            yearCountOneTxFd.setText(syss.get(i).getParamValue());}else{
            yearCountOneTxFd.setText("0");
            }
        }
        //10-20年
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.PAID_VACATION_TEN_YEAR.name())){
             if(!syss.get(i).getParamValue().equals("")){
             yearCountTenTxFd.setText(syss.get(i).getParamValue());}else{
            yearCountTenTxFd.setText("0");
            }
           
        }
        //20年
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.PAID_VACATION_TWENTY_YEAR.name())){
            if(!syss.get(i).getParamValue().equals("")){
            yearCountTwentyTxFd.setText(syss.get(i).getParamValue());}else{
            yearCountTwentyTxFd.setText("0");
            }
        }
        //内部年假
        if(syss.get(i).getParamKey().name().equals(SystemParamKey.PAID_VACATION_INNER.name())){
            if(!syss.get(i).getParamValue().equals("")){
            yearCountInnerTxFd.setText(syss.get(i).getParamValue());}else{
            yearCountInnerTxFd.setText("0");
            }
        }
        
        }
    }
    
        /**
	 * 校验时间格式（仅格式）
	 */
	private boolean checkHHMM(String time) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm");
         try {
             @SuppressWarnings("unused")
			Date t = dateFormat.parse(time);
         }
         catch (Exception ex) {
             return false;
         }
		return true;
	}
	
	/**
	 * 校验时间格式HH:MM（精确）
	 */
	private  boolean checkTime(String time) {
		if (checkHHMM(time)) {
			String[] temp = time.split(":");
			if ((temp[0].length() == 2 || temp[0].length() == 1) && temp[1].length() == 2) {
				int h,m;
				try {
					h = Integer.parseInt(temp[0]);
					m = Integer.parseInt(temp[1]);
				} catch (NumberFormatException e) {
					return false;
				}	
				if (h >= 0 && h <= 24 && m <= 60 && m >= 0) {
					return true;
				}
			}
		}
		return false;
	}
        /****

        * 验证数字

        * @param str

        * @return

        */

        private  boolean validateNumber(String str){
            Pattern pattern = Pattern.compile("[0-9]{1,}");
            Matcher matcher = pattern.matcher((CharSequence)str);
            boolean result=matcher.matches();
            return result;
        }

        private boolean analysisContents() {
        boolean flag = true;
        //上午开始时间
        String amStartTime = amStartTimeTxFd.getText();
        String pmStartTime = pmStartTimeTxFd.getText();
        String amEndTime = amEndTimeTxFd.getText();
        String pmEndTime = pmEndTimeTxFd.getText();
        String slightLate = slightLateTxFd.getText();
        String late = lateTxFd.getText();
        String seriousLate = seriousLateTxFd.getText();
        String yearCountOne = yearCountOneTxFd.getText();
        String yearCountTen = yearCountTenTxFd.getText();
        String yearCountTwenty = yearCountTwentyTxFd.getText();
        String yearCountInner = yearCountInnerTxFd.getText();
        
        //上午开始时间check
        if (amStartTime == null || amStartTime.length() <= 0) {
            gotoWarnMessage("上午开始时间不能为空");
            flag = false;
        }else if(!checkTime(amStartTime)) {
            gotoWarnMessage("上午开始时间的格式不正确");
            flag = false;
        }
        
        //下午开始时间check
        if (pmStartTime== null || pmStartTime.length() <= 0) {
            gotoWarnMessage("下午开始时间不能为空");
            flag = false;
        }else if (!checkTime(pmStartTime)) {
            gotoWarnMessage("下午开始时间的格式不正确");
            flag = false;
        }
        
        //上午结束时间check
        if (amEndTime == null || amEndTime.length() <= 0) {
            gotoWarnMessage("上午结束时间不能为空");
            flag = false;
        }else if (!checkTime(amEndTime)) {
            gotoWarnMessage("上午结束时间的格式不正确");
            flag = false;
        }
        
        //下午就结束时间check
        if (pmEndTime == null || pmEndTime.length() <= 0) {
            gotoWarnMessage("下午结束时间不能为空");
            flag = false;
        }else if (!checkTime(pmEndTime)) {
            gotoWarnMessage("下午结束时间的格式不正确");
            flag = false;
        }
        
        //年假天数check
        if (yearCountOne == null || yearCountOne.length() <= 0) {
            gotoWarnMessage("年假天数不能为空");
            flag = false;
        }else if (!validateNumber(yearCountOne)) {
            gotoWarnMessage("年假天数必须输入有效正数");
            flag = false;
        }else if (yearCountOne.length()>2) {
            gotoWarnMessage("年假天数长度不能大于2");
            flag = false;
        }
        
        if (yearCountTen == null || yearCountTen.length() <= 0) {
            gotoWarnMessage("年假天数不能为空");
            flag = false;
        }else if (!validateNumber(yearCountTen)) {
            gotoWarnMessage("年假天数必须输入有效正数");
            flag = false;
        }else if (yearCountTen.length()>2) {
            gotoWarnMessage("年假天数长度不能大于2");
            flag = false;
        }
        
        if (yearCountTwenty == null || yearCountTwenty.length() <= 0) {
            gotoWarnMessage("年假天数不能为空");
            flag = false;
        }else if (!validateNumber(yearCountTwenty)) {
            gotoWarnMessage("年假天数必须输入有效正数");
            flag = false;
        }else if (yearCountTwenty.length()>2) {
            gotoWarnMessage("年假天数长度不能大于2");
            flag = false;
        }
        
        //内部年假天数check
        if (yearCountInner == null || yearCountInner.length() <= 0) {
            gotoWarnMessage("内部年假天数不能为空");
            flag = false;
        }else if (!validateNumber(yearCountInner)) {
            gotoWarnMessage("年假天数必须输入有效正数");
            flag = false;
        }else if (yearCountInner.length()>2) {
            gotoWarnMessage("内部年假天数长度不能大于2");
            flag = false;
        }
        
        //轻微迟到check
        if (slightLate == null || slightLate.length() <= 0) {
            gotoWarnMessage("轻微迟到不能为空");
            flag = false;
        }else if (!validateNumber(slightLate)) {
            gotoWarnMessage("轻微迟到必须输入有效正数");
            flag = false;
        }else if (Integer.valueOf(slightLate) < 0 || Integer.valueOf(slightLate) > 60) {
            gotoWarnMessage("轻微迟到必须在1-60分钟之间");
            flag = false;
        }
        
        //迟到check
        if (late == null || late.length() <= 0) {
            gotoWarnMessage("迟到不能为空");
            flag = false;
        }else if (!validateNumber(late)) {
            gotoWarnMessage("迟到必须输入有效正数");
            flag = false;
        }else if (Integer.valueOf(late) < 0 || Integer.valueOf(late) > 60) {
            gotoWarnMessage("迟到必须在1-60分钟之间");
            flag = false;
        }
        
        //严重迟到check
        if (seriousLate == null || seriousLate.length() <= 0) {
            gotoWarnMessage("严重迟到不能为空");
            flag = false;
        }else if (!validateNumber(seriousLate)) {
            gotoWarnMessage("严重迟到必须输入有效正数");
            flag = false;
        }else if (Integer.valueOf(seriousLate) < 0 || Integer.valueOf(seriousLate) > 60) {
            gotoWarnMessage("严重迟到必须在1-60分钟之间");
            flag = false;
        }
        return flag;
    }
        private void gotoWarnMessage(String msg){
        updateBtn.setEnabled(true);
        nActionPane1.getWaitingProcess().setVisible(false);
        nActionPane1.getWaitingProcess().setIndeterminate(false);
        NLabelMessageTool.warningMessage(nActionPane1.getMsgLabel(), msg);
        nActionPane1.getMsgLabel().setVisible(true);
    }
    /**
     * 获取面板中的信息，修改规则信息
     *
     * @return
     */
    public List<SystemParam> getPaneContent() {
        USMSUser curUser = ClientContext.getUser();
        systemParamList = new ArrayList<>();
        //当某一项的值真正被修改了，修改者ID、修改者姓名、修改时间才会被修改
        for (int j = 0;j< systemParamListOld.size();j++) {
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.WORK_START_TIME_AM.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(amStartTimeTxFd.getText())){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.WORK_START_TIME_AM);
                    systemParam.setParamValue(amStartTimeTxFd.getText());
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.WORK_END_TIME_AM.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(amEndTimeTxFd.getText())){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.WORK_END_TIME_AM);
                    systemParam.setParamValue(amEndTimeTxFd.getText());
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.WORK_START_TIME_PM.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(pmStartTimeTxFd.getText())){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.WORK_START_TIME_PM);
                    systemParam.setParamValue(pmStartTimeTxFd.getText());
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.WORK_END_TIME_PM.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(pmEndTimeTxFd.getText())){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.WORK_END_TIME_PM);
                    systemParam.setParamValue(pmEndTimeTxFd.getText());
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.LIGHT_DELAY_MINUTES.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(slightLateTxFd.getText().replaceFirst("^0*", ""))){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.LIGHT_DELAY_MINUTES);
                    systemParam.setParamValue(slightLateTxFd.getText().replaceFirst("^0*", ""));
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.NORMAL_DELAY_MINUTES.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(lateTxFd.getText().replaceFirst("^0*", ""))){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.NORMAL_DELAY_MINUTES);
                    systemParam.setParamValue(lateTxFd.getText().replaceFirst("^0*", ""));
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.SERIOUS_DELAY_MINUTES.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(seriousLateTxFd.getText().replaceFirst("^0*", ""))){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.SERIOUS_DELAY_MINUTES);
                    systemParam.setParamValue(seriousLateTxFd.getText().replaceFirst("^0*", ""));
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.PAID_VACATION_ONE_YEAR.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(yearCountOneTxFd.getText().replaceFirst("^0*", ""))){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.PAID_VACATION_ONE_YEAR);
                    systemParam.setParamValue(yearCountOneTxFd.getText().replaceFirst("^0*", ""));
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.PAID_VACATION_TEN_YEAR.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(yearCountTenTxFd.getText().replaceFirst("^0*", ""))){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.PAID_VACATION_TEN_YEAR);
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.PAID_VACATION_TWENTY_YEAR.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(yearCountTwentyTxFd.getText().replaceFirst("^0*", ""))){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.PAID_VACATION_TWENTY_YEAR);
                    systemParam.setParamValue(yearCountTwentyTxFd.getText().replaceFirst("^0*", ""));
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }
            if(systemParamListOld.get(j).getParamKey().name().equals(SystemParamKey.PAID_VACATION_INNER.name())){
                if(!systemParamListOld.get(j).getParamValue().equals(yearCountInnerTxFd.getText().replaceFirst("^0*", ""))){
                    SystemParam systemParam = new SystemParam();
                    systemParam.setParamKey(SystemParamKey.PAID_VACATION_INNER);
                    systemParam.setParamValue(yearCountInnerTxFd.getText().replaceFirst("^0*", ""));
                    systemParam.setModifierId(curUser.getId());
                    systemParam.setModifierName(curUser.getName());
                    systemParam.setModifyTime(new Date());                 
                    systemParamList.add(systemParam);
                }
            }      
        }
        return systemParamList;
    }
 public void initPaneContent(List<SystemParam> systemParamList) {
        this.systemParamList = systemParamList;
        fillRulesPane(systemParamList);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amEndTimeLb;
    private javax.swing.JTextField amEndTimeTxFd;
    private javax.swing.JLabel amStartTimeLb;
    private javax.swing.JTextField amStartTimeTxFd;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel innerYearLb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lateLb;
    private javax.swing.JPanel latePanel;
    private javax.swing.JTextField lateTxFd;
    private javax.swing.JLabel lightLb;
    private com.nazca.ui.NActionPane nActionPane1;
    private javax.swing.JLabel normalLateLb;
    private javax.swing.JLabel pmEndTimeLb;
    private javax.swing.JTextField pmEndTimeTxFd;
    private javax.swing.JLabel pmStartTimeLb;
    private javax.swing.JTextField pmStartTimeTxFd;
    private javax.swing.JLabel seriousLateLb;
    private javax.swing.JTextField seriousLateTxFd;
    private javax.swing.JLabel seriouseLb;
    private javax.swing.JLabel slightLateLb;
    private javax.swing.JTextField slightLateTxFd;
    private javax.swing.JPanel systemParaPanel;
    private javax.swing.JButton updateBtn;
    private javax.swing.JPanel workTimePanel1;
    private javax.swing.JPanel workYearPanel;
    private javax.swing.JLabel year1Lb;
    private javax.swing.JLabel year2Lb;
    private javax.swing.JLabel year3Lb;
    private javax.swing.JLabel yearCountInnerLb;
    private javax.swing.JTextField yearCountInnerTxFd;
    private javax.swing.JLabel yearCountOneLb;
    private javax.swing.JTextField yearCountOneTxFd;
    private javax.swing.JLabel yearCountTenLb;
    private javax.swing.JTextField yearCountTenTxFd;
    private javax.swing.JLabel yearCountTwentyLb;
    private javax.swing.JTextField yearCountTwentyTxFd;
    // End of variables declaration//GEN-END:variables
private AgentListener<List<SystemParam>> modifiySystemParamAgentLis = new AgentListener<List<SystemParam>>() {
        @Override//监听
        public void onStarted(long seq) {
            cancelBtn.setEnabled(false);
            updateBtn.setEnabled(false);
            nActionPane1.getWaitingProcess().setVisible(true);
            nActionPane1.getWaitingProcess().setIndeterminate(true);
            nActionPane1.getMsgLabel().setVisible(true);
            NLabelMessageTool.infoMessage(nActionPane1.getMsgLabel(), "正在提交");
        }
          @Override
         public void onSucceeded(List<SystemParam> result, long seq) {
            cancelBtn.setEnabled(true);
            updateBtn.setEnabled(true);
            nActionPane1.getWaitingProcess().setVisible(false);
            nActionPane1.getWaitingProcess().setIndeterminate(false);
            NLabelMessageTool.goodNewsMessage(nActionPane1.getMsgLabel(), "提交成功");
            nActionPane1.getMsgLabel().setVisible(true);
            NInternalDiag.findNInternalDiag(ModifyRulesPanel.this).hideDiag(result);

         }
         @Override
         public void onFailed(String errMsg, int errCode, long seq) {
            cancelBtn.setEnabled(true);
            updateBtn.setEnabled(true);
            nActionPane1.getWaitingProcess().setVisible(false);
            nActionPane1.getWaitingProcess().setIndeterminate(false);
            NLabelMessageTool.errorMessage(nActionPane1.getMsgLabel(), errCode, errMsg);
            nActionPane1.getMsgLabel().setVisible(true);
         }
         
            };
}
